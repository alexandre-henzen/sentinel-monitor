name: EAM CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build e Test .NET
  build-dotnet:
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Generate version
      id: version
      run: |
        $version = "5.0.${{ github.run_number }}"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Generated version: $version"
    
    - name: Restore dependencies
      run: dotnet restore EAM.sln
    
    - name: Build
      run: dotnet build EAM.sln --configuration Release --no-restore
    
    - name: Test
      run: dotnet test EAM.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: dotnet
        name: codecov-dotnet
    
    - name: Publish Agent
      run: dotnet publish src/EAM.Agent/EAM.Agent.csproj --configuration Release --output ./dist/Agent --runtime win-x64 --self-contained true
    
    - name: Publish API
      run: dotnet publish src/EAM.API/EAM.API.csproj --configuration Release --output ./dist/API --runtime linux-x64 --self-contained false
    
    - name: Upload .NET artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-artifacts
        path: ./dist/
        retention-days: 7

  # Job 2: Build Angular
  build-angular:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: src
    
    - name: Lint
      run: npm run lint
      working-directory: src
    
    - name: Test
      run: npm run test:ci
      working-directory: src
    
    - name: Build Production
      run: npm run build:prod
      working-directory: src
    
    - name: Upload Angular artifacts
      uses: actions/upload-artifact@v4
      with:
        name: angular-artifacts
        path: src/dist/
        retention-days: 7

  # Job 3: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-dotnet, build-angular]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: 'csharp,javascript'

  # Job 4: Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [build-dotnet, build-angular, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [agent, api, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.component == 'frontend' && 'angular-artifacts' || 'dotnet-artifacts' }}
        path: ./artifacts/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/docker/${{ matrix.component }}.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
    
    - name: Deploy to staging
      run: |
        ./deploy/scripts/deploy.sh staging ${{ needs.build-dotnet.outputs.version }}
    
    - name: Run health checks
      run: |
        ./deploy/scripts/health-check.sh staging
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 6: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
    
    - name: Backup production database
      run: |
        ./deploy/scripts/backup.sh production
    
    - name: Deploy to production
      run: |
        ./deploy/scripts/deploy.sh production ${{ needs.build-dotnet.outputs.version }}
    
    - name: Run health checks
      run: |
        ./deploy/scripts/health-check.sh production
    
    - name: Rollback on failure
      if: failure()
      run: |
        ./deploy/scripts/rollback.sh production
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}