name: Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Dependency Vulnerability Scan
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: .NET Security Audit
      run: dotnet list package --vulnerable --include-transitive
    
    - name: NPM Security Audit
      run: npm audit --audit-level=high
      working-directory: src
    
    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: vulnerability-report
        path: |
          vulnerability-report.json
          npm-audit-report.json

  # Job 2: Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarQube Analysis
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    
    - name: Run ESLint
      run: npm run lint:security
      working-directory: src
    
    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-results
        path: src/eslint-results.json

  # Job 3: Container Security Scan
  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Agent Image
      run: |
        docker build -f deploy/docker/agent.Dockerfile -t eam-agent:security-scan .
    
    - name: Build API Image
      run: |
        docker build -f deploy/docker/api.Dockerfile -t eam-api:security-scan .
    
    - name: Build Frontend Image
      run: |
        docker build -f deploy/docker/frontend.Dockerfile -t eam-frontend:security-scan .
    
    - name: Run Trivy on Agent
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'eam-agent:security-scan'
        format: 'sarif'
        output: 'trivy-agent-results.sarif'
    
    - name: Run Trivy on API
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'eam-api:security-scan'
        format: 'sarif'
        output: 'trivy-api-results.sarif'
    
    - name: Run Trivy on Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'eam-frontend:security-scan'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-agent-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-api-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  # Job 4: Secrets Detection
  secrets-detection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Job 5: SAST Analysis
  sast-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'csharp,javascript'
        queries: security-extended
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build for CodeQL
      run: dotnet build EAM.sln --configuration Release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:csharp,javascript"

  # Job 6: License Compliance
  license-compliance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install license checker
      run: dotnet tool install --global dotnet-project-licenses
    
    - name: Check .NET licenses
      run: dotnet-project-licenses --input . --output-format json --output licenses.json
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install license checker
      run: npm install -g license-checker
    
    - name: Check NPM licenses
      run: license-checker --production --json --out npm-licenses.json
      working-directory: src
    
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses.json
          src/npm-licenses.json

  # Job 7: DAST Analysis (only for main branch)
  dast-analysis:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Start application stack
      run: |
        docker-compose -f infrastructure/docker-compose.yml up -d
        sleep 60  # Wait for services to start
    
    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:7001'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Stop application stack
      if: always()
      run: |
        docker-compose -f infrastructure/docker-compose.yml down